// <auto-generated />
using System;
using EventManagement.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RestfulAPI.src.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(EventManagementDbContext))]
    [Migration("20250409075159_AddSeedData")]
    partial class AddSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("EventManagement.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Events related to software, hardware, and the internet.",
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Concerts, festivals, and music workshops.",
                            Name = "Music"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sporting events, competitions, and fitness activities.",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Culinary events, food festivals, and wine tastings.",
                            Name = "Food &amp; Drink"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Exhibitions, theatre performances, and cultural festivals.",
                            Name = "Arts &amp; Culture"
                        });
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StartDate");

                    b.HasIndex("Status");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Annual conference focusing on the latest trends in technology, AI, and software development.",
                            EndDate = new DateTime(2025, 10, 17, 17, 0, 0, 0, DateTimeKind.Utc),
                            LocationId = 1,
                            StartDate = new DateTime(2025, 10, 15, 9, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Published",
                            Title = "Tech Conference 2025"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "A curated collection of modern art from renowned artists.",
                            EndDate = new DateTime(2025, 12, 20, 18, 0, 0, 0, DateTimeKind.Utc),
                            LocationId = 2,
                            StartDate = new DateTime(2025, 11, 5, 10, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Published",
                            Title = "Art Exhibition: Modern Masters"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "5k charity run to support local community projects. All ages welcome.",
                            EndDate = new DateTime(2025, 9, 20, 11, 0, 0, 0, DateTimeKind.Utc),
                            LocationId = 3,
                            StartDate = new DateTime(2025, 9, 20, 8, 30, 0, 0, DateTimeKind.Utc),
                            Status = "Completed",
                            Title = "Community Charity Run"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Description = "Weekend music festival featuring diverse genres and artists.",
                            EndDate = new DateTime(2025, 8, 3, 23, 0, 0, 0, DateTimeKind.Utc),
                            LocationId = 1,
                            StartDate = new DateTime(2025, 8, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Completed",
                            Title = "Music Festival: Summer Sounds"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Deep dive into advanced C# features and .NET internals.",
                            EndDate = new DateTime(2025, 11, 26, 16, 30, 0, 0, DateTimeKind.Utc),
                            LocationId = 2,
                            StartDate = new DateTime(2025, 11, 25, 9, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Published",
                            Title = "Advanced C# Workshop"
                        });
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.EventParticipant", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<string>("AttendanceStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("EventId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("EventParticipants");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            ParticipantId = 1,
                            AttendanceStatus = "Registered",
                            RegistrationDate = new DateTime(2025, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            EventId = 1,
                            ParticipantId = 2,
                            AttendanceStatus = "Registered",
                            RegistrationDate = new DateTime(2025, 1, 16, 11, 30, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            EventId = 2,
                            ParticipantId = 1,
                            AttendanceStatus = "Attended",
                            RegistrationDate = new DateTime(2025, 2, 1, 9, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            EventId = 2,
                            ParticipantId = 3,
                            AttendanceStatus = "Registered",
                            RegistrationDate = new DateTime(2025, 2, 5, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            EventId = 3,
                            ParticipantId = 3,
                            AttendanceStatus = "Cancelled",
                            RegistrationDate = new DateTime(2025, 3, 10, 16, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            EventId = 3,
                            ParticipantId = 4,
                            AttendanceStatus = "Registered",
                            RegistrationDate = new DateTime(2025, 3, 11, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            EventId = 4,
                            ParticipantId = 4,
                            AttendanceStatus = "Attended",
                            RegistrationDate = new DateTime(2025, 4, 1, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            EventId = 4,
                            ParticipantId = 5,
                            AttendanceStatus = "Registered",
                            RegistrationDate = new DateTime(2025, 4, 2, 13, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            EventId = 5,
                            ParticipantId = 1,
                            AttendanceStatus = "Registered",
                            RegistrationDate = new DateTime(2025, 5, 5, 9, 30, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            EventId = 5,
                            ParticipantId = 5,
                            AttendanceStatus = "Attended",
                            RegistrationDate = new DateTime(2025, 5, 6, 11, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "City", "Country");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            Capacity = 500,
                            City = "New York",
                            Country = "USA",
                            Name = "Conference Center A"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Innovation Dr",
                            Capacity = 300,
                            City = "San Francisco",
                            Country = "USA",
                            Name = "Tech Hub B"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Community Ave",
                            Capacity = 1000,
                            City = "London",
                            Country = "UK",
                            Name = "Event Hall C"
                        });
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("varchar(254)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company = "TechCorp",
                            Email = "alice.smith@example.com",
                            FirstName = "Alice",
                            JobTitle = "Software Engineer",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 2,
                            Company = "Innovate Ltd.",
                            Email = "bob.johnson@example.com",
                            FirstName = "Bob",
                            JobTitle = "Project Manager",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 3,
                            Company = "Data Solutions",
                            Email = "charlie.brown@sample.net",
                            FirstName = "Charlie",
                            JobTitle = "Data Analyst",
                            LastName = "Brown"
                        },
                        new
                        {
                            Id = 4,
                            Company = "Global Enterprises",
                            Email = "diana.prince@mail.org",
                            FirstName = "Diana",
                            JobTitle = "Marketing Specialist",
                            LastName = "Prince"
                        },
                        new
                        {
                            Id = 5,
                            Company = "Security Inc.",
                            Email = "ethan.hunt@secure.com",
                            FirstName = "Ethan",
                            JobTitle = "Security Consultant",
                            LastName = "Hunt"
                        });
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SessionId", "ParticipantId")
                        .IsUnique();

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Excellent session, very informative!",
                            ParticipantId = 1,
                            Score = 5,
                            SessionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Good content, but the speaker was a bit fast.",
                            ParticipantId = 2,
                            Score = 4,
                            SessionId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Average session, met expectations.",
                            ParticipantId = 3,
                            Score = 3,
                            SessionId = 3
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Fantastic speaker, very engaging.",
                            ParticipantId = 4,
                            Score = 5,
                            SessionId = 4
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Content was not relevant to my interests.",
                            ParticipantId = 5,
                            Score = 2,
                            SessionId = 5
                        });
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId", "Name")
                        .IsUnique();

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 500,
                            LocationId = 1,
                            Name = "Grand Ballroom"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 50,
                            LocationId = 1,
                            Name = "Meeting Room 101"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 50,
                            LocationId = 1,
                            Name = "Meeting Room 102"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 300,
                            LocationId = 2,
                            Name = "Innovation Hall"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 75,
                            LocationId = 2,
                            Name = "Workshop Alpha"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 200,
                            LocationId = 3,
                            Name = "Lecture Hall C1"
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 40,
                            LocationId = 3,
                            Name = "Seminar Room C2"
                        });
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("RoomId");

                    b.HasIndex("StartTime");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Overview of new features in C# 12.",
                            EndTime = new DateTime(2025, 10, 20, 10, 30, 0, 0, DateTimeKind.Utc),
                            EventId = 1,
                            RoomId = 1,
                            StartTime = new DateTime(2025, 10, 20, 9, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Introduction to C# 12"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Deep dive into asynchronous programming in .NET.",
                            EndTime = new DateTime(2025, 10, 20, 12, 30, 0, 0, DateTimeKind.Utc),
                            EventId = 1,
                            RoomId = 2,
                            StartTime = new DateTime(2025, 10, 20, 11, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Advanced Async Patterns"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Learn how to design and build microservices.",
                            EndTime = new DateTime(2025, 11, 15, 11, 30, 0, 0, DateTimeKind.Utc),
                            EventId = 2,
                            RoomId = 3,
                            StartTime = new DateTime(2025, 11, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Building Microservices with ASP.NET Core"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Tips and tricks for efficient data access with EF Core.",
                            EndTime = new DateTime(2025, 11, 15, 14, 30, 0, 0, DateTimeKind.Utc),
                            EventId = 3,
                            RoomId = 4,
                            StartTime = new DateTime(2025, 11, 15, 13, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Entity Framework Core Best Practices"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Authentication and authorization strategies for APIs.",
                            EndTime = new DateTime(2025, 12, 5, 11, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4,
                            RoomId = 5,
                            StartTime = new DateTime(2025, 12, 5, 9, 30, 0, 0, DateTimeKind.Utc),
                            Title = "Securing Web APIs"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Building interactive web UIs with C# and Blazor.",
                            EndTime = new DateTime(2025, 12, 5, 13, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 5,
                            RoomId = 1,
                            StartTime = new DateTime(2025, 12, 5, 11, 30, 0, 0, DateTimeKind.Utc),
                            Title = "Introduction to Blazor"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Creating lightweight APIs with minimal code.",
                            EndTime = new DateTime(2025, 10, 20, 15, 30, 0, 0, DateTimeKind.Utc),
                            EventId = 1,
                            RoomId = 3,
                            StartTime = new DateTime(2025, 10, 20, 14, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Minimal APIs in .NET 8"
                        });
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.SessionSpeaker", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SessionId", "SpeakerId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("SessionSpeakers");

                    b.HasData(
                        new
                        {
                            SessionId = 1,
                            SpeakerId = 1,
                            Role = "Lead Speaker"
                        },
                        new
                        {
                            SessionId = 2,
                            SpeakerId = 2,
                            Role = "Panelist"
                        },
                        new
                        {
                            SessionId = 3,
                            SpeakerId = 3,
                            Role = "Keynote"
                        },
                        new
                        {
                            SessionId = 4,
                            SpeakerId = 4,
                            Role = "Workshop Facilitator"
                        },
                        new
                        {
                            SessionId = 5,
                            SpeakerId = 1,
                            Role = "Co-Speaker"
                        },
                        new
                        {
                            SessionId = 5,
                            SpeakerId = 2,
                            Role = "Co-Speaker"
                        },
                        new
                        {
                            SessionId = 6,
                            SpeakerId = 3,
                            Role = "Moderator"
                        },
                        new
                        {
                            SessionId = 6,
                            SpeakerId = 4,
                            Role = "Panelist"
                        },
                        new
                        {
                            SessionId = 7,
                            SpeakerId = 1,
                            Role = "Lead Speaker"
                        },
                        new
                        {
                            SessionId = 7,
                            SpeakerId = 3,
                            Role = "Guest Speaker"
                        });
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Company")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("varchar(254)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Speakers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Expert in cloud technologies and DevOps practices.",
                            Company = "Cloud Solutions Inc.",
                            Email = "alice.j@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Specialist in modern web development frameworks.",
                            Company = "WebDev Experts",
                            Email = "bob.s@example.com",
                            FirstName = "Bob",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Data scientist with a focus on machine learning applications.",
                            Company = "Data Insights Co.",
                            Email = "charlie.b@example.com",
                            FirstName = "Charlie",
                            LastName = "Brown"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Agile coach and project management professional.",
                            Company = "Agile Transformations Ltd.",
                            Email = "diana.p@example.com",
                            FirstName = "Diana",
                            LastName = "Prince"
                        });
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Event", b =>
                {
                    b.HasOne("EventManagement.Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventManagement.Domain.Entities.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.EventParticipant", b =>
                {
                    b.HasOne("EventManagement.Domain.Entities.Event", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.Domain.Entities.Participant", "Participant")
                        .WithMany("EventParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Rating", b =>
                {
                    b.HasOne("EventManagement.Domain.Entities.Participant", "Participant")
                        .WithMany("Ratings")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.Domain.Entities.Session", "Session")
                        .WithMany("Ratings")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Room", b =>
                {
                    b.HasOne("EventManagement.Domain.Entities.Location", "Location")
                        .WithMany("Rooms")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Session", b =>
                {
                    b.HasOne("EventManagement.Domain.Entities.Event", "Event")
                        .WithMany("Sessions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.Domain.Entities.Room", "Room")
                        .WithMany("Sessions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.SessionSpeaker", b =>
                {
                    b.HasOne("EventManagement.Domain.Entities.Session", "Session")
                        .WithMany("SessionSpeakers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.Domain.Entities.Speaker", "Speaker")
                        .WithMany("SessionSpeakers")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Event", b =>
                {
                    b.Navigation("EventParticipants");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Location", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Participant", b =>
                {
                    b.Navigation("EventParticipants");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Room", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Session", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("SessionSpeakers");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Speaker", b =>
                {
                    b.Navigation("SessionSpeakers");
                });
#pragma warning restore 612, 618
        }
    }
}
